一、前言　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　

  当使用coffeescript书写如下代码时 name = person?.name 会被预编译为 var name = typeof person !== "undefined" && person !== null ? person.name : void 0; ，那么void 0到底是什么意思呢？运行得知void 0===undefined为true。那为什么不直接使用undefined而要使用void 0呢？而一元运算符void具体又有什么作用呢？下面将展开来说明。

 

二、为什么不直接用undefined　　　　　　　　　　　　　　　　　　　　　　　　　　

  undefined在JavaScript中并不属于保留字/关键字，因此在IE5.5~8中我们可以将其当作变量那样对其赋值（IE9+及其他现代浏览器中赋值给undefined将无效）


复制代码
var undefinedBackup = undefined;
undefined = 1;
// 显示"undefined"
console.log(typeof undefinedBackup);  
// 在IE5.5~8中显示"number"，其他浏览器中则显示"undefined"
console.log(typeof undefined);

复制代码

  于是采用void方式获取undefined则成了通用准则。

 

三、一元运算符void的作用　　　　　　　　　　　　　　　　　　　　　　　　　

  void在ECMAScript 262规范如下：


The void Operator

The production UnaryExpression : void UnaryExpression is evaluated as follows:
•Let expr be the result of evaluating UnaryExpression.
•Call GetValue(expr).
•Return undefined.

NOTE: GetValue must be called even though its value is not used because it may have observable side-effects.

   void的行为特点为：

　　1. 不管void后的运算数是什么，只管返回纯正的undefined；

　　2. void会对其后的运算数作取值操作，因此若属性有个getter函数，那么就会调用getter函数（因此会产生副作用）


复制代码
var article = {
    _view: 0,
    get view(){
        console.log(this._view);
    return this._view++;
    }
};
var test = void article.view; // 显示0
console.log(test); // 显示undefined
console.log(article._view); // 显示1

复制代码

   通过一元运算符 delete 作对比，delete的其中一个行为特点是不对其运算数进行取值操作（delete的其他行为特点比我们想的复杂得多，这里就不详细记录了）


复制代码
var article = {
    _view: 0,
    get view(){
    console.log(this._view);
    return this._view++;
    }
};
var ret = delete article.view;
console.log(ret); // 显示true
console.log(article._view); // 显示0

复制代码

 

四、还有啥方式可以得到纯正的undefined？　　　　　　　　　　　　　　　　

  除了通过一元运算符void获取纯正的undefined，其实我们还有如下方法来获取：

  1. 未赋值的变量

var myUndefined;
console.log(typeof myUndefined); // 显示"undefined"

  2. 未赋值的实参（和未赋值的变量同理）


复制代码
var getUndefined = function(undefined){
  return undefined;
};
var myUndefined = getUndefined();
// 或通过arguments获取
var getUndefined = function(){
  return arguments[arguments.length];
};

复制代码

  3. 无返回值函数

var getUndefined = function(){};
var myUndefined = getUndefined();

  4. 未定义的属性

var myUndefined1 = {}[''];
var myUndefined2 = [][0];

 

五、总结　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　

  一个小小的void和undefined就这么好玩，前端的世界还有很多事情要深入研究哦！！
  
  转自：http://www.cnblogs.com/fsjohnhuang/p/4146506.html^_^肥子John
